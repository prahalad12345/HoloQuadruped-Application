// Generated by gencpp from file puppy_control2/ServoControl.msg
// DO NOT EDIT!


#ifndef PUPPY_CONTROL2_MESSAGE_SERVOCONTROL_H
#define PUPPY_CONTROL2_MESSAGE_SERVOCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace puppy_control2
{
template <class ContainerAllocator>
struct ServoControl_
{
  typedef ServoControl_<ContainerAllocator> Type;

  ServoControl_()
    : frontleftx(0.0)
    , frontleftz(0.0)
    , frontrightx(0.0)
    , frontrightz(0.0)
    , backleftx(0.0)
    , backleftz(0.0)
    , backrightx(0.0)
    , backrightz(0.0)  {
    }
  ServoControl_(const ContainerAllocator& _alloc)
    : frontleftx(0.0)
    , frontleftz(0.0)
    , frontrightx(0.0)
    , frontrightz(0.0)
    , backleftx(0.0)
    , backleftz(0.0)
    , backrightx(0.0)
    , backrightz(0.0)  {
  (void)_alloc;
    }



   typedef float _frontleftx_type;
  _frontleftx_type frontleftx;

   typedef float _frontleftz_type;
  _frontleftz_type frontleftz;

   typedef float _frontrightx_type;
  _frontrightx_type frontrightx;

   typedef float _frontrightz_type;
  _frontrightz_type frontrightz;

   typedef float _backleftx_type;
  _backleftx_type backleftx;

   typedef float _backleftz_type;
  _backleftz_type backleftz;

   typedef float _backrightx_type;
  _backrightx_type backrightx;

   typedef float _backrightz_type;
  _backrightz_type backrightz;





  typedef boost::shared_ptr< ::puppy_control2::ServoControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::puppy_control2::ServoControl_<ContainerAllocator> const> ConstPtr;

}; // struct ServoControl_

typedef ::puppy_control2::ServoControl_<std::allocator<void> > ServoControl;

typedef boost::shared_ptr< ::puppy_control2::ServoControl > ServoControlPtr;
typedef boost::shared_ptr< ::puppy_control2::ServoControl const> ServoControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::puppy_control2::ServoControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::puppy_control2::ServoControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::puppy_control2::ServoControl_<ContainerAllocator1> & lhs, const ::puppy_control2::ServoControl_<ContainerAllocator2> & rhs)
{
  return lhs.frontleftx == rhs.frontleftx &&
    lhs.frontleftz == rhs.frontleftz &&
    lhs.frontrightx == rhs.frontrightx &&
    lhs.frontrightz == rhs.frontrightz &&
    lhs.backleftx == rhs.backleftx &&
    lhs.backleftz == rhs.backleftz &&
    lhs.backrightx == rhs.backrightx &&
    lhs.backrightz == rhs.backrightz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::puppy_control2::ServoControl_<ContainerAllocator1> & lhs, const ::puppy_control2::ServoControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace puppy_control2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::puppy_control2::ServoControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puppy_control2::ServoControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy_control2::ServoControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy_control2::ServoControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy_control2::ServoControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy_control2::ServoControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::puppy_control2::ServoControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "326b3455b95de3ececfaa8d7b1eb8c40";
  }

  static const char* value(const ::puppy_control2::ServoControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x326b3455b95de3ecULL;
  static const uint64_t static_value2 = 0xecfaa8d7b1eb8c40ULL;
};

template<class ContainerAllocator>
struct DataType< ::puppy_control2::ServoControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "puppy_control2/ServoControl";
  }

  static const char* value(const ::puppy_control2::ServoControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::puppy_control2::ServoControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 frontleftx\n"
"float32 frontleftz\n"
"\n"
"float32 frontrightx\n"
"float32 frontrightz\n"
"\n"
"float32 backleftx\n"
"float32 backleftz\n"
"\n"
"float32 backrightx\n"
"float32 backrightz\n"
;
  }

  static const char* value(const ::puppy_control2::ServoControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::puppy_control2::ServoControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frontleftx);
      stream.next(m.frontleftz);
      stream.next(m.frontrightx);
      stream.next(m.frontrightz);
      stream.next(m.backleftx);
      stream.next(m.backleftz);
      stream.next(m.backrightx);
      stream.next(m.backrightz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::puppy_control2::ServoControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::puppy_control2::ServoControl_<ContainerAllocator>& v)
  {
    s << indent << "frontleftx: ";
    Printer<float>::stream(s, indent + "  ", v.frontleftx);
    s << indent << "frontleftz: ";
    Printer<float>::stream(s, indent + "  ", v.frontleftz);
    s << indent << "frontrightx: ";
    Printer<float>::stream(s, indent + "  ", v.frontrightx);
    s << indent << "frontrightz: ";
    Printer<float>::stream(s, indent + "  ", v.frontrightz);
    s << indent << "backleftx: ";
    Printer<float>::stream(s, indent + "  ", v.backleftx);
    s << indent << "backleftz: ";
    Printer<float>::stream(s, indent + "  ", v.backleftz);
    s << indent << "backrightx: ";
    Printer<float>::stream(s, indent + "  ", v.backrightx);
    s << indent << "backrightz: ";
    Printer<float>::stream(s, indent + "  ", v.backrightz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUPPY_CONTROL2_MESSAGE_SERVOCONTROL_H
